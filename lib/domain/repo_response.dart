class RepoResponse {
  RepoResponse({
    required this.id,
    required this.nodeId,
    required this.name,
    required this.fullName,
    required this.owner,
    required this.private,
    required this.htmlUrl,
    required this.description,
    required this.fork,
    required this.url,
    required this.archiveUrl,
    required this.assigneesUrl,
    required this.blobsUrl,
    required this.branchesUrl,
    required this.collaboratorsUrl,
    required this.commentsUrl,
    required this.commitsUrl,
    required this.compareUrl,
    required this.contentsUrl,
    required this.contributorsUrl,
    required this.deploymentsUrl,
    required this.downloadsUrl,
    required this.eventsUrl,
    required this.forksUrl,
    required this.gitCommitsUrl,
    required this.gitRefsUrl,
    required this.gitTagsUrl,
    required this.gitUrl,
    required this.issueCommentUrl,
    required this.issueEventsUrl,
    required this.issuesUrl,
    required this.keysUrl,
    required this.labelsUrl,
    required this.languagesUrl,
    required this.mergesUrl,
    required this.milestonesUrl,
    required this.notificationsUrl,
    required this.pullsUrl,
    required this.releasesUrl,
    required this.sshUrl,
    required this.stargazersUrl,
    required this.statusesUrl,
    required this.subscribersUrl,
    required this.subscriptionUrl,
    required this.tagsUrl,
    required this.teamsUrl,
    required this.treesUrl,
    required this.cloneUrl,
    required this.hooksUrl,
    required this.svnUrl,
    required this.homepage,
    required this.language,
    required this.forksCount,
    required this.forks,
    required this.stargazersCount,
    required this.watchersCount,
    required this.watchers,
    required this.size,
    required this.defaultBranch,
    required this.openIssuesCount,
    required this.openIssues,
    required this.hasIssues,
    required this.hasProjects,
    required this.hasWiki,
    required this.hasPages,
    required this.hasDownloads,
    required this.archived,
    required this.disabled,
    required this.templateRepository,
    required this.tempCloneToken,
    required this.allowSquashMerge,
    required this.allowAutoMerge,
    required this.deleteBranchOnMerge,
    required this.allowMergeCommit,
    required this.subscribersCount,
    required this.networkCount,
    required this.license,
    required this.organization,
    required this.parent,
    required this.source,
  });

  int? id;
  String? nodeId;
  String? name;
  String? fullName;
  Organization owner;
  bool? private;
  String? htmlUrl;
  String? description;
  bool? fork;
  String? url;
  String? archiveUrl;
  String? assigneesUrl;
  String? blobsUrl;
  String? branchesUrl;
  String? collaboratorsUrl;
  String? commentsUrl;
  String? commitsUrl;
  String? compareUrl;
  String? contentsUrl;
  String? contributorsUrl;
  String? deploymentsUrl;
  String? downloadsUrl;
  String? eventsUrl;
  String? forksUrl;
  String? gitCommitsUrl;
  String? gitRefsUrl;
  String? gitTagsUrl;
  String? gitUrl;
  String? issueCommentUrl;
  String? issueEventsUrl;
  String? issuesUrl;
  String? keysUrl;
  String? labelsUrl;
  String? languagesUrl;
  String? mergesUrl;
  String? milestonesUrl;
  String? notificationsUrl;
  String? pullsUrl;
  String? releasesUrl;
  String? sshUrl;
  String? stargazersUrl;
  String? statusesUrl;
  String? subscribersUrl;
  String? subscriptionUrl;
  String? tagsUrl;
  String? teamsUrl;
  String? treesUrl;
  String? cloneUrl;
  String? hooksUrl;
  String? svnUrl;
  String? homepage;
  dynamic language;
  int? forksCount;
  int? forks;
  int? stargazersCount;
  int? watchersCount;
  int? watchers;
  int? size;
  String? defaultBranch;
  int? openIssuesCount;
  int? openIssues;
  bool? hasIssues;
  bool? hasProjects;
  bool? hasWiki;
  bool? hasPages;
  bool? hasDownloads;
  bool? archived;
  bool? disabled;
  Parent? templateRepository;
  String? tempCloneToken;
  bool? allowSquashMerge;
  bool? allowAutoMerge;
  bool? deleteBranchOnMerge;
  bool? allowMergeCommit;
  int? subscribersCount;
  int? networkCount;
  License? license;
  Organization organization;
  Parent? parent;
  Parent? source;

  factory RepoResponse.fromJson(Map<String?, dynamic>? json) => RepoResponse(
        id: json?["id"],
        nodeId: json?["node_id"],
        name: json?["name"],
        fullName: json?["full_name"],
        owner: Organization.fromJson(json?["owner"]),
        private: json?["private"],
        htmlUrl: json?["html_url"],
        description: json?["description"],
        fork: json?["fork"],
        url: json?["url"],
        archiveUrl: json?["archive_url"],
        assigneesUrl: json?["assignees_url"],
        blobsUrl: json?["blobs_url"],
        branchesUrl: json?["branches_url"],
        collaboratorsUrl: json?["collaborators_url"],
        commentsUrl: json?["comments_url"],
        commitsUrl: json?["commits_url"],
        compareUrl: json?["compare_url"],
        contentsUrl: json?["contents_url"],
        contributorsUrl: json?["contributors_url"],
        deploymentsUrl: json?["deployments_url"],
        downloadsUrl: json?["downloads_url"],
        eventsUrl: json?["events_url"],
        forksUrl: json?["forks_url"],
        gitCommitsUrl: json?["git_commits_url"],
        gitRefsUrl: json?["git_refs_url"],
        gitTagsUrl: json?["git_tags_url"],
        gitUrl: json?["git_url"],
        issueCommentUrl: json?["issue_comment_url"],
        issueEventsUrl: json?["issue_events_url"],
        issuesUrl: json?["issues_url"],
        keysUrl: json?["keys_url"],
        labelsUrl: json?["labels_url"],
        languagesUrl: json?["languages_url"],
        mergesUrl: json?["merges_url"],
        milestonesUrl: json?["milestones_url"],
        notificationsUrl: json?["notifications_url"],
        pullsUrl: json?["pulls_url"],
        releasesUrl: json?["releases_url"],
        sshUrl: json?["ssh_url"],
        stargazersUrl: json?["stargazers_url"],
        statusesUrl: json?["statuses_url"],
        subscribersUrl: json?["subscribers_url"],
        subscriptionUrl: json?["subscription_url"],
        tagsUrl: json?["tags_url"],
        teamsUrl: json?["teams_url"],
        treesUrl: json?["trees_url"],
        cloneUrl: json?["clone_url"],
        hooksUrl: json?["hooks_url"],
        svnUrl: json?["svn_url"],
        homepage: json?["homepage"],
        language: json?["language"],
        forksCount: json?["forks_count"],
        forks: json?["forks"],
        stargazersCount: json?["stargazers_count"],
        watchersCount: json?["watchers_count"],
        watchers: json?["watchers"],
        size: json?["size"],
        defaultBranch: json?["default_branch"],
        openIssuesCount: json?["open_issues_count"],
        openIssues: json?["open_issues"],
        hasIssues: json?["has_issues"],
        hasProjects: json?["has_projects"],
        hasWiki: json?["has_wiki"],
        hasPages: json?["has_pages"],
        hasDownloads: json?["has_downloads"],
        archived: json?["archived"],
        disabled: json?["disabled"],
        templateRepository: Parent.fromJson(json?["template_repository"]),
        tempCloneToken: json?["temp_clone_token"],
        allowSquashMerge: json?["allow_squash_merge"],
        allowAutoMerge: json?["allow_auto_merge"],
        deleteBranchOnMerge: json?["delete_branch_on_merge"],
        allowMergeCommit: json?["allow_merge_commit"],
        subscribersCount: json?["subscribers_count"],
        networkCount: json?["network_count"],
        license: License?.fromJson(json?["license"]),
        organization: Organization.fromJson(json?["organization"]),
        parent: Parent.fromJson(json?["parent"]),
        source: Parent.fromJson(json?["source"]),
      );

  Map<String?, dynamic>? toJson() => {
        "id": id,
        "node_id": nodeId,
        "name": name,
        "full_name": fullName,
        "owner": owner.toJson(),
        "private": private,
        "html_url": htmlUrl,
        "description": description,
        "fork": fork,
        "url": url,
        "archive_url": archiveUrl,
        "assignees_url": assigneesUrl,
        "blobs_url": blobsUrl,
        "branches_url": branchesUrl,
        "collaborators_url": collaboratorsUrl,
        "comments_url": commentsUrl,
        "commits_url": commitsUrl,
        "compare_url": compareUrl,
        "contents_url": contentsUrl,
        "contributors_url": contributorsUrl,
        "deployments_url": deploymentsUrl,
        "downloads_url": downloadsUrl,
        "events_url": eventsUrl,
        "forks_url": forksUrl,
        "git_commits_url": gitCommitsUrl,
        "git_refs_url": gitRefsUrl,
        "git_tags_url": gitTagsUrl,
        "git_url": gitUrl,
        "issue_comment_url": issueCommentUrl,
        "issue_events_url": issueEventsUrl,
        "issues_url": issuesUrl,
        "keys_url": keysUrl,
        "labels_url": labelsUrl,
        "languages_url": languagesUrl,
        "merges_url": mergesUrl,
        "milestones_url": milestonesUrl,
        "notifications_url": notificationsUrl,
        "pulls_url": pullsUrl,
        "releases_url": releasesUrl,
        "ssh_url": sshUrl,
        "stargazers_url": stargazersUrl,
        "statuses_url": statusesUrl,
        "subscribers_url": subscribersUrl,
        "subscription_url": subscriptionUrl,
        "tags_url": tagsUrl,
        "teams_url": teamsUrl,
        "trees_url": treesUrl,
        "clone_url": cloneUrl,
        "hooks_url": hooksUrl,
        "svn_url": svnUrl,
        "homepage": homepage,
        "language": language,
        "forks_count": forksCount,
        "forks": forks,
        "stargazers_count": stargazersCount,
        "watchers_count": watchersCount,
        "watchers": watchers,
        "size": size,
        "default_branch": defaultBranch,
        "open_issues_count": openIssuesCount,
        "open_issues": openIssues,
        "has_issues": hasIssues,
        "has_projects": hasProjects,
        "has_wiki": hasWiki,
        "has_pages": hasPages,
        "has_downloads": hasDownloads,
        "archived": archived,
        "disabled": disabled,
        "template_repository": templateRepository?.toJson(),
        "temp_clone_token": tempCloneToken,
        "allow_squash_merge": allowSquashMerge,
        "allow_auto_merge": allowAutoMerge,
        "delete_branch_on_merge": deleteBranchOnMerge,
        "allow_merge_commit": allowMergeCommit,
        "subscribers_count": subscribersCount,
        "network_count": networkCount,
        "license": license?.toJson(),
        "organization": organization.toJson(),
        "parent": parent?.toJson(),
        "source": source?.toJson(),
      };
}

class License {
  License({
    required this.key,
    required this.name,
    required this.spdxId,
    required this.url,
    required this.nodeId,
    required this.htmlUrl,
  });

  String? key;
  String? name;
  String? spdxId;
  String? url;
  String? nodeId;
  String? htmlUrl;

  factory License.fromJson(Map<String?, dynamic>? json) => License(
        key: json?["key"],
        name: json?["name"],
        spdxId: json?["spdx_id"],
        url: json?["url"],
        nodeId: json?["node_id"],
        htmlUrl: json?["html_url"] == null ? null : json?["html_url"],
      );

  Map<String?, dynamic>? toJson() => {
        "key": key,
        "name": name,
        "spdx_id": spdxId,
        "url": url,
        "node_id": nodeId,
        "html_url": htmlUrl == null ? null : htmlUrl,
      };
}

class Organization {
  Organization({
    required this.login,
    required this.id,
    required this.nodeId,
    required this.avatarUrl,
    required this.gravatarId,
    required this.url,
    required this.htmlUrl,
    required this.followersUrl,
    required this.followingUrl,
    required this.gistsUrl,
    required this.starredUrl,
    required this.subscriptionsUrl,
    required this.organizationsUrl,
    required this.reposUrl,
    required this.eventsUrl,
    required this.receivedEventsUrl,
    required this.type,
    required this.siteAdmin,
  });

  String? login;
  int? id;
  String? nodeId;
  String? avatarUrl;
  String? gravatarId;
  String? url;
  String? htmlUrl;
  String? followersUrl;
  String? followingUrl;
  String? gistsUrl;
  String? starredUrl;
  String? subscriptionsUrl;
  String? organizationsUrl;
  String? reposUrl;
  String? eventsUrl;
  String? receivedEventsUrl;
  String? type;
  bool? siteAdmin;

  factory Organization.fromJson(Map<String?, dynamic>? json) => Organization(
        login: json?["login"],
        id: json?["id"],
        nodeId: json?["node_id"],
        avatarUrl: json?["avatar_url"],
        gravatarId: json?["gravatar_id"],
        url: json?["url"],
        htmlUrl: json?["html_url"],
        followersUrl: json?["followers_url"],
        followingUrl: json?["following_url"],
        gistsUrl: json?["gists_url"],
        starredUrl: json?["starred_url"],
        subscriptionsUrl: json?["subscriptions_url"],
        organizationsUrl: json?["organizations_url"],
        reposUrl: json?["repos_url"],
        eventsUrl: json?["events_url"],
        receivedEventsUrl: json?["received_events_url"],
        type: json?["type"],
        siteAdmin: json?["site_admin"],
      );

  Map<String?, dynamic>? toJson() => {
        "login": login,
        "id": id,
        "node_id": nodeId,
        "avatar_url": avatarUrl,
        "gravatar_id": gravatarId,
        "url": url,
        "html_url": htmlUrl,
        "followers_url": followersUrl,
        "following_url": followingUrl,
        "gists_url": gistsUrl,
        "starred_url": starredUrl,
        "subscriptions_url": subscriptionsUrl,
        "organizations_url": organizationsUrl,
        "repos_url": reposUrl,
        "events_url": eventsUrl,
        "received_events_url": receivedEventsUrl,
        "type": type,
        "site_admin": siteAdmin,
      };
}

class Parent {
  Parent({
    required this.id,
    required this.nodeId,
    required this.name,
    required this.fullName,
    required this.owner,
    required this.private,
    required this.htmlUrl,
    required this.description,
    required this.fork,
    required this.url,
    required this.archiveUrl,
    required this.assigneesUrl,
    required this.blobsUrl,
    required this.branchesUrl,
    required this.collaboratorsUrl,
    required this.commentsUrl,
    required this.commitsUrl,
    required this.compareUrl,
    required this.contentsUrl,
    required this.contributorsUrl,
    required this.deploymentsUrl,
    required this.downloadsUrl,
    required this.eventsUrl,
    required this.forksUrl,
    required this.gitCommitsUrl,
    required this.gitRefsUrl,
    required this.gitTagsUrl,
    required this.gitUrl,
    required this.issueCommentUrl,
    required this.issueEventsUrl,
    required this.issuesUrl,
    required this.keysUrl,
    required this.labelsUrl,
    required this.languagesUrl,
    required this.mergesUrl,
    required this.milestonesUrl,
    required this.notificationsUrl,
    required this.pullsUrl,
    required this.releasesUrl,
    required this.sshUrl,
    required this.stargazersUrl,
    required this.statusesUrl,
    required this.subscribersUrl,
    required this.subscriptionUrl,
    required this.tagsUrl,
    required this.teamsUrl,
    required this.treesUrl,
    required this.cloneUrl,
    required this.hooksUrl,
    required this.svnUrl,
    required this.homepage,
    required this.language,
    required this.forksCount,
    required this.stargazersCount,
    required this.watchersCount,
    required this.size,
    required this.defaultBranch,
    required this.openIssuesCount,
    required this.hasIssues,
    required this.hasProjects,
    required this.hasWiki,
    required this.hasPages,
    required this.hasDownloads,
    required this.archived,
    required this.disabled,
    required this.tempCloneToken,
    required this.allowSquashMerge,
    required this.allowAutoMerge,
    required this.deleteBranchOnMerge,
    required this.allowMergeCommit,
    required this.subscribersCount,
    required this.networkCount,
    required this.license,
    required this.forks,
    required this.openIssues,
    required this.watchers,
  });

  int? id;
  String? nodeId;
  String? name;
  String? fullName;
  Organization owner;
  bool? private;
  String? htmlUrl;
  String? description;
  bool? fork;
  String? url;
  String? archiveUrl;
  String? assigneesUrl;
  String? blobsUrl;
  String? branchesUrl;
  String? collaboratorsUrl;
  String? commentsUrl;
  String? commitsUrl;
  String? compareUrl;
  String? contentsUrl;
  String? contributorsUrl;
  String? deploymentsUrl;
  String? downloadsUrl;
  String? eventsUrl;
  String? forksUrl;
  String? gitCommitsUrl;
  String? gitRefsUrl;
  String? gitTagsUrl;
  String? gitUrl;
  String? issueCommentUrl;
  String? issueEventsUrl;
  String? issuesUrl;
  String? keysUrl;
  String? labelsUrl;
  String? languagesUrl;
  String? mergesUrl;
  String? milestonesUrl;
  String? notificationsUrl;
  String? pullsUrl;
  String? releasesUrl;
  String? sshUrl;
  String? stargazersUrl;
  String? statusesUrl;
  String? subscribersUrl;
  String? subscriptionUrl;
  String? tagsUrl;
  String? teamsUrl;
  String? treesUrl;
  String? cloneUrl;
  String? hooksUrl;
  String? svnUrl;
  String? homepage;
  dynamic language;
  int? forksCount;
  int? stargazersCount;
  int? watchersCount;
  int? size;
  String? defaultBranch;
  int? openIssuesCount;
  bool? hasIssues;
  bool? hasProjects;
  bool? hasWiki;
  bool? hasPages;
  bool? hasDownloads;
  bool? archived;
  bool? disabled;
  String? tempCloneToken;
  bool? allowSquashMerge;
  bool? allowAutoMerge;
  bool? deleteBranchOnMerge;
  bool? allowMergeCommit;
  int? subscribersCount;
  int? networkCount;
  License? license;
  int? forks;
  int? openIssues;
  int? watchers;

  factory Parent.fromJson(Map<String?, dynamic>? json) => Parent(
        id: json?["id"],
        nodeId: json?["node_id"],
        name: json?["name"],
        fullName: json?["full_name"],
        owner: Organization.fromJson(json?["owner"]),
        private: json?["private"],
        htmlUrl: json?["html_url"],
        description: json?["description"],
        fork: json?["fork"],
        url: json?["url"],
        archiveUrl: json?["archive_url"],
        assigneesUrl: json?["assignees_url"],
        blobsUrl: json?["blobs_url"],
        branchesUrl: json?["branches_url"],
        collaboratorsUrl: json?["collaborators_url"],
        commentsUrl: json?["comments_url"],
        commitsUrl: json?["commits_url"],
        compareUrl: json?["compare_url"],
        contentsUrl: json?["contents_url"],
        contributorsUrl: json?["contributors_url"],
        deploymentsUrl: json?["deployments_url"],
        downloadsUrl: json?["downloads_url"],
        eventsUrl: json?["events_url"],
        forksUrl: json?["forks_url"],
        gitCommitsUrl: json?["git_commits_url"],
        gitRefsUrl: json?["git_refs_url"],
        gitTagsUrl: json?["git_tags_url"],
        gitUrl: json?["git_url"],
        issueCommentUrl: json?["issue_comment_url"],
        issueEventsUrl: json?["issue_events_url"],
        issuesUrl: json?["issues_url"],
        keysUrl: json?["keys_url"],
        labelsUrl: json?["labels_url"],
        languagesUrl: json?["languages_url"],
        mergesUrl: json?["merges_url"],
        milestonesUrl: json?["milestones_url"],
        notificationsUrl: json?["notifications_url"],
        pullsUrl: json?["pulls_url"],
        releasesUrl: json?["releases_url"],
        sshUrl: json?["ssh_url"],
        stargazersUrl: json?["stargazers_url"],
        statusesUrl: json?["statuses_url"],
        subscribersUrl: json?["subscribers_url"],
        subscriptionUrl: json?["subscription_url"],
        tagsUrl: json?["tags_url"],
        teamsUrl: json?["teams_url"],
        treesUrl: json?["trees_url"],
        cloneUrl: json?["clone_url"],
        hooksUrl: json?["hooks_url"],
        svnUrl: json?["svn_url"],
        homepage: json?["homepage"],
        language: json?["language"],
        forksCount: json?["forks_count"],
        stargazersCount: json?["stargazers_count"],
        watchersCount: json?["watchers_count"],
        size: json?["size"],
        defaultBranch: json?["default_branch"],
        openIssuesCount: json?["open_issues_count"],
        hasIssues: json?["has_issues"],
        hasProjects: json?["has_projects"],
        hasWiki: json?["has_wiki"],
        hasPages: json?["has_pages"],
        hasDownloads: json?["has_downloads"],
        archived: json?["archived"],
        disabled: json?["disabled"],
        tempCloneToken: json?["temp_clone_token"],
        allowSquashMerge: json?["allow_squash_merge"],
        allowAutoMerge: json?["allow_auto_merge"],
        deleteBranchOnMerge: json?["delete_branch_on_merge"],
        allowMergeCommit: json?["allow_merge_commit"],
        subscribersCount: json?["subscribers_count"],
        networkCount: json?["network_count"],
        license: License.fromJson(json?["license"]),
        forks: json?["forks"],
        openIssues: json?["open_issues"],
        watchers: json?["watchers"],
      );

  Map<String?, dynamic>? toJson() => {
        "id": id,
        "node_id": nodeId,
        "name": name,
        "full_name": fullName,
        "owner": owner.toJson(),
        "private": private,
        "html_url": htmlUrl,
        "description": description,
        "fork": fork,
        "url": url,
        "archive_url": archiveUrl,
        "assignees_url": assigneesUrl,
        "blobs_url": blobsUrl,
        "branches_url": branchesUrl,
        "collaborators_url": collaboratorsUrl,
        "comments_url": commentsUrl,
        "commits_url": commitsUrl,
        "compare_url": compareUrl,
        "contents_url": contentsUrl,
        "contributors_url": contributorsUrl,
        "deployments_url": deploymentsUrl,
        "downloads_url": downloadsUrl,
        "events_url": eventsUrl,
        "forks_url": forksUrl,
        "git_commits_url": gitCommitsUrl,
        "git_refs_url": gitRefsUrl,
        "git_tags_url": gitTagsUrl,
        "git_url": gitUrl,
        "issue_comment_url": issueCommentUrl,
        "issue_events_url": issueEventsUrl,
        "issues_url": issuesUrl,
        "keys_url": keysUrl,
        "labels_url": labelsUrl,
        "languages_url": languagesUrl,
        "merges_url": mergesUrl,
        "milestones_url": milestonesUrl,
        "notifications_url": notificationsUrl,
        "pulls_url": pullsUrl,
        "releases_url": releasesUrl,
        "ssh_url": sshUrl,
        "stargazers_url": stargazersUrl,
        "statuses_url": statusesUrl,
        "subscribers_url": subscribersUrl,
        "subscription_url": subscriptionUrl,
        "tags_url": tagsUrl,
        "teams_url": teamsUrl,
        "trees_url": treesUrl,
        "clone_url": cloneUrl,
        "hooks_url": hooksUrl,
        "svn_url": svnUrl,
        "homepage": homepage,
        "language": language,
        "forks_count": forksCount,
        "stargazers_count": stargazersCount,
        "watchers_count": watchersCount,
        "size": size,
        "default_branch": defaultBranch,
        "open_issues_count": openIssuesCount,
        "has_issues": hasIssues,
        "has_projects": hasProjects,
        "has_wiki": hasWiki,
        "has_pages": hasPages,
        "has_downloads": hasDownloads,
        "archived": archived,
        "disabled": disabled,
        "temp_clone_token": tempCloneToken,
        "allow_squash_merge": allowSquashMerge,
        "allow_auto_merge": allowAutoMerge,
        "delete_branch_on_merge": deleteBranchOnMerge,
        "allow_merge_commit": allowMergeCommit,
        "subscribers_count": subscribersCount,
        "network_count": networkCount,
        "license": license?.toJson(),
        "forks": forks,
        "open_issues": openIssues,
        "watchers": watchers,
      };
}
